#+title: TinyRenderer via Lisp
#+author: 凉凉
* About
This repo was built referring to the [[https://github.com/ssloy/tinyrenderer][TinyRenderer tutorial]] by [[https://github.com/ssloy][ssloy]].

However, there is some little difference between this project
and the origin TinyRenderer project (wiki):
+ I use Common Lisp instead of C++
+ I use [[https://github.com/slyrus/opticl][opticl]] to manipulate PNG file instead of TGA file
+ This repo is not done yet :lol:

* Tests
:PROPERTIES:
:header-args:lisp: :tangle ./test/tiny-renderer.lisp :results file :exports both
:END:

#+name: tiny-renderer-test
#+headers: :exports none :results silent
#+begin_src lisp
  (defpackage tiny-renderer-test
    (:use :cl :tiny-renderer)
    (:local-nicknames (#:obj #:wavefront-obj))
    (:documentation "This is test examples for TinyRenderer."))

  (in-package tiny-renderer-test)
#+end_src

#+name: tiny-renderer-test-output-path
#+headers: :exports none :results silent
#+begin_src lisp
  (defparameter output-path "./output/"
    "The output file path of test files.")
#+end_src

#+name: tiny-renderer-test-resource-path
#+headers: :exports none :results silent
#+begin_src lisp
  (defparameter resource-path "./resource/"
    "The resource file path of test files.")
#+end_src

The test platform was carried on my personal computer (MacBook Air 2021 M1).

** Lesson 0
Within lesson 0, the main idea is that to use a =bound-pixel= to set color of
a specific pixel:

#+name: lesson-0-draw-a-pixel
#+begin_src lisp
  (time
   (with-image (image 100 100 (str:concat output-path "lesson-0.png"))
     (bound-pixel image (50 50) +red+)))
#+end_src

#+caption: Lesson 0: Draw a pixel
#+RESULTS: lesson-0-draw-a-pixel
[[file:./output/lesson-0.png]]

or if you thought is is a little boring:

#+name: lesson-0-draw-circle
#+begin_src lisp
  (time
   (with-image (image 100 100 (str:concat output-path "lesson-0-2.png"))
     (loop for theta from 0 below (* 20 pi) by 0.01 
           for x = (floor (+ 50 (* theta (cos theta))))
           for y = (floor (+ 50 (* theta (sin theta))))
           do (bound-pixel image (x y) +red+))))
#+end_src

#+caption: Lesson 0 (2): Draw Circle
#+RESULTS: lesson-0-draw-circle
[[file:./output/lesson-0-2.png]]

Note: internally, instead of =bound-pixel= the =tiny-renderer= use =pixel= function,
which does not came with a boundary check.

** Lesson 1
Within lesson 1, the main idea is to draw a line with possible high speed
as well as good qualities.

#+name: lesson-2-draw-line
#+begin_src lisp
  (time
   (let ((size 5000)
         (step 10))
     (with-image (image size size (str:concat output-path "lesson-1.png"))
       (loop for i from 0 below size by step do
         (draw-line image 0 0 i size +red+))
       (loop for i from 0 below size by step do
         (draw-line image 0 size size i +green+))
       (loop for i from 0 below size by step do
         (draw-line image size size i 0 +blue+))
       (loop for i from 0 below size by step do
         (draw-line image size 0 0 i +white+)))))
#+end_src

#+attr_org: :width 0.8
#+caption: Lesson 1: Draw Line
#+RESULTS: lesson-2-draw-line
[[file:./output/lesson-1.png]]

it would took my computer about 3 second to draw the entire image (5000x5000),
which could not be so fast yet. However, with smaller image (1000x1000),
it would do faster (of course) (round 0.13s).

*** Lesson 1: Read Wavefront Object file
The original tinyrenderer class use wavefront object file to read 3D
model informations, so I made a =wavefront-obj= package to read the obj file.

(although it now is very limited)

Note: there is a local nickname =obj= for =wavefront-obj= package to make the
code alot more neat.

#+name: lesson-1-read-obj-miku
#+headers: :results silent
#+begin_src lisp
  (time
   (defparameter miku
     (obj:read-wavefront-obj (str:concat resource-path "miku.obj"))))
#+end_src

the =miku.obj= is about =15.7MB=, which took my computer about 4.5s to open.

(yes, the parser is a little slow)

#+name: lesson-1-read-obj-head
#+headers: :results silent
#+begin_src lisp
  (time
   (defparameter head
     (obj:read-wavefront-obj (str:concat resource-path "african_head.obj"))))
#+end_src

the =african_head.obj= is about =195KB=, which took my computer about 0.064s to
open. This file is from the origin tinyrenderer repo ([[https://github.com/ssloy/tinyrenderer/blob/f6fecb7ad493264ecd15e230411bfb1cca539a12/obj/african_head.obj][link]]).

*** Lesson 1: Draw Wireframe of obj file
First is the =african_head.obj=:

#+name: lesson-1-draw-vertex
#+headers: :results silent
#+begin_src lisp
  (defun draw-line-vertex-center (image v1 v2 color)
    "Draw line using wavefront object vertex, center at image center."
    (declare (obj:vertex v1 v2))
    (opticl:with-image-bounds (height width) image
      (labels ((->x (v) (ceiling (* width  (- 0.5 (* 0.5 (obj:vertex-x v))))))
               (->y (v) (ceiling (* height (- 0.5 (* 0.5 (obj:vertex-y v)))))))
        (draw-line image (->x v1) (->y v1) (->x v2) (->y v2) color))))

  (defun draw-line-vertex-bottom (image v1 v2 color)
    "Draw line using wavefront object vertex, center at image bottom."
    (declare (obj:vertex v1 v2))
    (opticl:with-image-bounds (height width) image
      (labels ((->x (v) (ceiling (* width  (- 0.5 (* 0.5 (obj:vertex-x v))))))
               (->y (v) (ceiling (* height (- 1.0 (* 0.5 (obj:vertex-y v)))))))
        (draw-line image (->x v1) (->y v1) (->x v2) (->y v2) color))))

  (defun draw-obj-wireframe
      (image obj color &key (line-fn #'draw-line-vertex-center))
    "Draw `obj' on `image' by wireframe using `color'. "
    (loop for idx below (length (obj:obj-faces obj))
          for face = (obj:face-vertices (elt (obj:obj-faces obj) idx))
          do (loop for i below 3
                   for j = (mod (1+ i) 3)
                   for vi = (elt (obj:obj-vertices obj) (1- (elt face i)))
                   for vj = (elt (obj:obj-vertices obj) (1- (elt face j)))
                   do (funcall line-fn image vi vj color))))
#+end_src

#+name: lesson-1-draw-head
#+begin_src lisp
  (time
   (with-image (image 1000 1000 (str:concat output-path "lesson-1-head.png"))
     (draw-obj-wireframe image head +white+)))
#+end_src

#+attr_org: :width 0.5
#+RESULTS: lesson-1-draw-head
[[file:./output/lesson-1-head.png]]

#+name: lesson-2-draw-miku
#+begin_src lisp
  (time
   (with-image (image 5000 5000 (str:concat output-path "lesson-1-miku.png"))
     (draw-obj-wireframe image miku +white+ :line-fn #'draw-line-vertex-bottom)))
#+end_src

#+attr_org: :width 0.5
#+RESULTS: lesson-2-draw-miku
[[file:./output/lesson-1-miku.png]]
